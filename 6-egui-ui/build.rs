use std::{fmt::Write, path::Path};

use wgsl_to_wgpu::{create_shader_module, MatrixVectorTypes, WriteOptions};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let shader_dir = Path::new("src/shaders");
    let shaders = shader_dir.read_dir()?;
    for entry in shaders {
        let entry = entry?;
        let path = entry.path();

        // Skip if not a .wgsl file
        if !path.is_file() || path.extension().and_then(|s| s.to_str()) != Some("wgsl") {
            continue;
        }

        // Get the file stem (name without extension) for the shader
        let name = path
            .file_stem()
            .and_then(|s| s.to_str())
            .ok_or("Invalid shader filename")?;

        println!("cargo:rerun-if-changed=src/shaders/{name}.wgsl");
        let wgsl_file = format!("src/shaders/{name}.wgsl");
        let wgsl_source = std::fs::read_to_string(&wgsl_file)?;

        // Generate the Rust bindings and write to a file.
        let mut text = String::new();
        writeln!(&mut text, "// File automatically generated by build.rs.")?;
        writeln!(&mut text, "// Changes made to this file will not be saved.")?;

        text += &create_shader_module(
            &wgsl_source,
            &format!("{name}.wgsl"),
            WriteOptions {
                derive_bytemuck_vertex: true,
                derive_encase_host_shareable: true,
                matrix_vector_types: MatrixVectorTypes::Glam,
                rustfmt: true,
                validate: Some(Default::default()),
                ..Default::default()
            },
        )
        .inspect_err(|error| error.emit_to_stderr_with_path(&wgsl_source, &wgsl_file))
        .map_err(|_| "Failed to validate shader")?;

        std::fs::write(format!("src/shaders/{name}.rs"), text.as_bytes())?;
    }

    Ok(())
}
